//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "literature")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    pub text: String,
    pub author_handle: String,
    pub author_instance: String,
    pub is_nsfw: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::literature_vote::Entity")]
    LiteratureVote,
}

impl Related<super::literature_vote::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LiteratureVote.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
